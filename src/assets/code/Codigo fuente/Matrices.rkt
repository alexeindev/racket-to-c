;Crear una matriz de enteros de orden 3x4, inicializarla \n
;con los numeros en orden ascendente del 1 al 12, finalmente \n
;imprimir la matriz.\n
(require math/matrix)
(define (ascendente)
    (define valor 1)
    (define mat (make-matrix 3 4 0))
    (for ([i (in-range 0 3 1)])
        (for ([j (in-range 0 4 1)])
            (matrix-set mat i j (set! valor (+ valor 1)))
        )
    )
    (printf "\n***La matriz digitada es: ***\n")
    (for ([i (in-range 0 3 1)])
        (for ([j (in-range 0 4 1)])
            (printf "~a " (matrix-ref mat i j))
        )
    )
)

(ascendente)

;Crear un programa que pida por consola el tamaño para una \n
;matriz de enteros, luego el usuario podrá llenar dicha matriz, \n
;una vez hecho esto imprimir la matriz\n
(require math/matrix)
(define (fillMatrix)
    (define dato 0)
    (printf "Ingrese la cantidad de filas que tendra la matriz: ")
	(define fil (read))
	(printf "\nAhora ingrese la cantidad de columnas: ")
	(define col (read))
    (define mat (make-matrix fil col 0))
    (printf "\nIngrese los valores para: ")
    (for ([i (in-range 0 fil 1)])
        (for ([j (in-range 0 col 1)])
            (printf "\nPosición [~a] [~a]: " i j)
            (set! dato (read))
            (matrix-set mat i j dato)
        )
    )
    (printf "\n***La matriz digitada es: ***\n")
    (for ([i (in-range 0 3 1)])
        (for ([j (in-range 0 4 1)])
            (printf "~a " (matrix-ref mat i j))
        )
    )
)

(fillMatrix)

;Crear un programa que llene dos matrices de igual orden e \n
;imprima la suma de estas.\n
(require math/matrix)
(define (SumMatrices)
    (define dato 0)
    (printf "Ingrese la cantidad de filas que tendra la matriz: ")
	(define fil (read))
	(printf "\nAhora ingrese la cantidad de columnas: ")
	(define col (read))
    (define mat (make-matrix fil col 0))
    (define mat2 (make-matrix fil col 0))
    (define suma (make-matrix fil col 0))
    (printf "\nIngrese los valores para la matriz 1: ")
    (for ([i (in-range 0 fil 1)])
        (for ([j (in-range 0 col 1)])
            (printf "\nPosición [~a] [~a]: " i j)
            (set! dato (read))
            (matrix-set mat i j dato)
        )
    )
    (printf "\nIngrese los valores para la matriz 2: ")
    (for ([i (in-range 0 fil 1)])
        (for ([j (in-range 0 col 1)])
            (printf "\nPosición [~a] [~a]: " i j)
            (set! dato (read))
            (matrix-set mat2 i j dato)
        )
    )
    (for ([i (in-range 0 fil 1)])
        (for ([j (in-range 0 col 1)])
            (matrix-set suma i j (+ (matrix-ref mat i j) (matrix-ref mat2 i j)))
        )
    )
    (for ([i (in-range 0 3 1)])
        (for ([j (in-range 0 4 1)])
            (printf "~a " (matrix-ref suma i j))
        )
    )
)

(SumMatrices)

;Crear un programa que simule una base de datos, que tenga \n
;el nombre de una persona junto con su n�mero telefonico.\n
(require math/matrix)
(define (Database)
    (printf "Personas a registrar en la base de datos: ")
    (define fil (read))
    (define nombres (make-matrix fil 50 0))
    (define numeros (make-matrix fil 12 0))
    (printf "\nLlenar la base de datos: ")
    (for ([i (in-range 0 fil 1)])
        (for ([j (in-range 0 2 1)])
            (printf "\nDigite el nombre de la persona ~a: " i+1)
            (matrix-set nombres i j (read))
            (printf"\Numero de ~a: " (matrix-ref nombres i j))
            (matrix-set numeros i j (read))
        )
    )
	(printf "\n***BASE DE DATOS: ***\n")
    (for ([i (in-range 0 fil 1)])
        (for ([j (in-range 0 2 1)])
            (printf "\nNombre: ~a | Telefono: ~a" (matrix-ref nombres i j) (matrix-ref numeros i j))
        )
    )
)

(Database)

;Crear un sistema que organice citas medicas, el programa\n
;debe ofrecer la posibilidad de listar citas por mes.\n
(require math/matrix)
(define (citas)
    (define fil 0)(define col 0)
    (define opcion 0)(define mes 0)
    (printf "Citas para agendar: ")
    (set! fil (read))
    (define paciente (make-matrix fil 50 0))
    (define fecha (make-matrix fil 4 0))
    (for ([i (in-range 0 fil 1)])
        (printf "\nDigite el nombre del paciente ~a: ", i+1)
		(matrix-set paciente i (+ i 1) (read))
		(printf "\nDatos de la cita:\nDia: ")
		(matrix-set fecha i 0 (read))
		(printf "Mes: ")
		(matrix-set fecha i 1 (read))
		(printf "Anio: ")
		(matrix-set fecha i 2 (read))
		(printf "Hora: ")
		(matrix-set fecha i 3 (read))
    )
    (printf "\nEscriba el numero del mes para listar las citas: ")
	(set! mes (read))
    (for ([i (in-range 0 fil 1)])
        (if (= mes (matrix-ref fecha i 1))
			(printf "\nPaciente ~a: " (matrix-ref paciente i (+ i 1)))
            (printf "\nFecha: |~a|" (matrix-ref fec0Napsterha i 0))
            (printf "~a|~a| - " (matrix-ref fecha i 1)(matrix-ref fecha i 2))
            (printf "Hora: ~a:00" (matrix-ref fecha i 3))
        )
    )
)

(citas)

;Crear un programa que lleve la información acerca de los\n
;modulos de un parqueadero. Un modulo tiene dos estados, libre\n
;u ocupado, usar un menú.\n
;CONSEJOS: Use una matriz las cuales tenga dos columnas, una \n
;para el modulo y otra para el estado de dicho modulo, usar \n
;0 o 1 para expresar el estado libre y ocupado respectivamente.\n
(require math/matrix)
(define (parqueadero)
    (define fil 0)(define col 2)(define opcion 0)(define mod 0)
	(printf "Modulos del parqueadero: ")
	(set! fil (read))
    (define parqueadero (make-matrix fil col 0))
    (for ([i (in-range 0 fil 1)])
        (matrix-set parqueadero i 1 0)
    )
    (do ((i 1 (+ i 1))) ((eq? opcion 4))
        (printf "*Menu Parqueadero*\n1. Ingresar un Vehiculo.")
		(printf "\n2. Salida Vehiculo.\n3. Modulos libres y Ocupados.")
		(printf "\n4. Salir\nDigite una opcion: ")
		(set! opcion (read))
        (if (= opcion 1)
            (begin
                (printf "\nIngrese el modulo donde va a parquear: ")
                (set! mod (read))
                (matrix-set parqueadero (- mod 1) 1 1)
            )
            (void)
        )
        (if (= opcion 2)
            (begin
                (printf "\nIngrese el modulo de donde sale el vehiculo: ")
                (set! mod (read))
                (matrix-set parqueadero (- mod 1) 1 0)
            )
            (void)
        )
        (if (= opcion 3)
            (begin
                (printf "\nModulos libres: ")
                (for ([i (in-range 0 fil 1)])
                    (if (= (matrix-ref parqueadero i 1) 0)
                        (printf "\nModulo [~a]" i+1)
                    )
                )
                (printf "\nModulos Ocupados ")
                (for ([i (in-range 0 fil 1)])
                    (if (= (matrix-ref parqueadero i 1) 1)
                        (printf "\nModulo [~a]" i+1)
                    )
                )
            )
            (void)
        )
    )
)

(parqueadero)